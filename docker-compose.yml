version: "3.8"

services:
  redis:
    build:
      context: ./redis
      dockerfile: Dockerfile
    restart: always
    networks:
      - team-d
    volumes:
      - ./redis/redis.conf:/etc/redis/redis.conf
      - ./redis/data:/var/lib/redis/
      - ./redis/logs:/var/log/redis/
    ports:
      - 6379:6379

  rabbitmq:
    build:
      context: ./rabbitmq
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - team-d
    volumes:
      - ./rabbitmq/etc/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/etc/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./rabbitmq/data:/var/lib/rabbitmq/
      - ./rabbitmq/logs:/var/log/rabbitmq/
    ports:
      - 5672:5672
      - 15672:15672

  postgres_db:
    image: postgres
    restart: always
    networks:
      - team-d
    volumes:
      - ./postgresql/db:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    cap_add:
      - SYS_NICE
    environment:
      - POSTGRES_DB=app
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=1234
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8

  webserver:
    build:
      context: ./webserver
      dockerfile: Dockerfile
    depends_on:
      # - rabbitmq
      - redis
      - postgres_db
    ports:
      - 8000:8000
    networks:
      - team-d
    env_file:
      - app.env
    # restart: on-failure
    volumes:
      - ./webserver/start-dev.sh:/app/start-dev.sh:ro
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./image_input:/data/image_input
      - ./image_output:/data/image_output
      - ./webserver:/app

    command: [sh, /app/start-dev.sh]

  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    depends_on:
      - webserver
    ports:
      - 80:80
    restart: always
    networks:
      - team-d
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf

  modelserver:
    build:
      context: ./modelserver
      dockerfile: Dockerfile
    depends_on:
      # - rabbitmq
      - redis
      - postgres_db
    ports:
      - 5001 # to multiple instances of modelserver (use this opt. '--scale modelserver=3')
    networks:
      - team-d
    env_file:
      - app.env
    # restart: on-failure
    volumes:
      - ./modelserver/start-dev.sh:/app/start-dev.sh:ro
      - ./modelserver/load-models.sh:/app/load-models.sh
      - ./wait-for-it.sh:/wait-for-it.sh
      - ./image_input:/data/image_input
      - ./image_output:/data/image_output
      - ./modelserver:/app
    command: [sh, /app/start-dev.sh]

  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    ports:
      - 3000:3000
    volumes:
      - ./client:/app
      - /app/node_modules
      - ./image_input:/app/src/assets/image_input
      - ./image_output:/app/src/assets/image_output
    networks:
      - team-d
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=ture

    ## moniroting services ##
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - 9090:9090
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - cadvisor
    networks:
      - team-d
    restart: always

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    networks:
      - team-d
    restart: always
    deploy:
      mode: global

  redis-exporter:
    image: oliver006/redis_exporter
    ports:
      - 9121:9121
    command:
      - --redis.addr=redis:6379
    networks:
      - team-d

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - team-d
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"

  cadvisor:
    image: google/cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - 8081:8080
    networks:
      - team-d
    restart: always
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - 3001:3000
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - team-d
    restart: always

networks:
  team-d:
    driver: bridge
